%\VignetteIndexEntry{Multivariate Function Visualization and Smooth Multiband Color Interpolation}
\documentclass{article}
\usepackage[a4paper,top=2.6cm,bottom=3.6cm,left=3.6cm,right=3.6cm]{geometry}
\usepackage{parskip,verbatim,amsmath,amssymb,color}
\usepackage[nogin]{Sweave}
\pagestyle{myheadings}
\setlength{\parskip}{0.28cm}
\DefineVerbatimEnvironment{Sinput}{Verbatim}{xleftmargin=0.75em, formatcom=\color{rin}}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{xleftmargin=0.75em,formatcom=\color{rout}}
\DefineVerbatimEnvironment{Serror}{Verbatim}{xleftmargin=0.75em,formatcom=\color{rerr}}
\newcommand {\stitle}[3]
{	\title {\vspace {-0.6cm} {\normalsize #1 #2} \\[0.8cm] {\textbf {\huge #3} } }
	\author {\textbf {Abby Spurdle} }
	\maketitle
	\markright{Spurdle, A.\hfill #1 #2\hfill}
	\thispagestyle {empty}
}
\newcommand {\sabstract}[1]
{	\begin {center}
	\begin {minipage}{14.25cm}
		{\textsl {#1} }
	\end {minipage}
	\end {center}
	\vspace {0.06cm}
}
\definecolor{db}{rgb}{0.0, 0, 0.8}
\definecolor{rin}{rgb}{0, 0, 0.32}
\definecolor{rout}{rgb}{0, 0.14, 0}
\definecolor{rerr}{rgb}{0.5, 0.025, 0}
\newcommand{\tmu}[1]{\textbf {\textsf {\color{db} #1}}}

\SweaveOpts{keep.source=TRUE}
\SweaveOpts{eps=FALSE}
\SweaveOpts{prefix.string=temp-bs}
\begin{document}

<<echo=false>>=
options(continue="  ")
options(SweaveHooks=list(fig=function()
par(mar=c(4.1, 4.1, 1.35, 1.6), cex=0.7, cex.main=1)))

set.seed (1)
@

\stitle {barsurf}{0.6.1}{Multivariate Function Visualization\\and\\Smooth\\Multiband Color Interpolation}

\sabstract {Combined contour/heatmap plots, 3d bar/surface plots, isosurface plots, triangular plots and 2d/3d vector fields. Supports smooth multiband color interpolation, via a system of litmus objects, in sRGB, HSV and HCL color spaces. There are predefined litmus objects which interpolate over hue only, for near-uniform perception.}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Introduction}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This package contains plotting functions for visualizing mathematical functions of two to three variables.

This includes:
\begin {itemize}
\item Combined contour-heatmap plots, for discretely-spaced data.
\item Combined contour-heatmap plots, for continuously-spaced data.
\item 3d bar and surface plots.
\item Triangular contour and surface plots.
\item Isosurface plots.
\item 3d-based contour-heatmap plots, for three continuous variables.
\end {itemize}

Also, there is/are:
\begin {itemize}
\item A wrapper function, for matrix visualization.
\item Plots of 2d and 3d vector fields.
\end {itemize}

The main plotting functions take matrices/arrays as their main arguments.

But there are also functional versions, which take a function as their main argument, along with xlim/ylim values.\\
(These call the main plotting functions, but compute the input matrices/arrays, along with some arguments).

This package uses the base graphics system, however, uses a different color system.

A system of ``litmus'' objects support smooth multiband color interpolation, primarily for heatmaps and surface plots, but may be used for other purposes.

Note that:
\begin {itemize}
\item All plots use vector graphics.\\
But high resolution heatmaps can produce smooth raster-like visual effects.
\item Currently, 3d plots use a diamond-like orthographic/dimetric projection, with a fixed viewing angle.\\
Plots can't be rotated, however, most plots can be reversed along one or more axes.\\
Reversing a 3d plot, in both the x and y axes, is equivalent to a 180\textdegree rotation.
\end {itemize}

Also, there are global options, which can change a variety of settings, including the reference arrows and default colors.

Refer to \tmu{set.bs.options}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Preliminary Code\\(And Required Packages)}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
I will load (and attach) the barsurf and misc3d packages.
<<>>=
library (barsurf)
library (misc3d)
@

Note that the barsurf package imports the kubik and colorspace packages.

Also, the misc3d package needs to be installed and loaded, in order to plot isosurfaces.

<<>>=
set.bs.options (rendering.style="pdf", theme="blue")
@

The ``pdf'' rendering style, uses finer lines.

And I'm setting the theme to blue.\\
(In principle, this is unnecessary because blue is the default).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Functions of Two Discrete Variables\\(And Discretely-Spaced Scalar Fields)}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The functions \tmu {plot\_dfield} and \tmu {plot\_bar} can used to plot matrices representing discretely-spaced scalar fields.

Also, the functions \tmu {plotf\_dfield} and \tmu {plotf\_bar} may be used, which take a function, along with xlim and ylim arguments.

Let's construct a simple matrix representing the product of two binomial distributions:
<<>>=
n <- 10
p <- 0.5
@

<<>>=
x <- y <- 0:10
f <- function (x, y, n, p)
    dbinom (x, n, p) * dbinom (y, n, p)
fv <- outer (x, y, f, n, p)
@

Then plot in 2d and 3d:
\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plot_dfield (x, y, fv)
@

<<fig=TRUE, width=4.75, height=3>>=
plot_bar (,,fv)
@
\end {center}

Note that it's possible to specify the third argument, using two commas, as in the above example.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Functions of Two Continuous Variables\\(And Continuously-Spaced Scalar Fields)}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The functions \tmu {plot\_cfield} and \tmu {plot\_surface} can used to plot matrices representing continuously-spaced scalar fields.

Also, the functions \tmu {plotf\_cfield} and \tmu {plotf\_surface} may be used, which take a function, along with xlim, ylim and n arguments.

Let's plot the rotated sinc function, adapted from the graphics::\tmu {persp} examples:

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plotf_cfield (rotated.sinc, c (-15.5, 15.5), fb=0, n=40, hcv=TRUE)
@

<<fig=TRUE, width=4.75, height=3>>=
plotf_surface (rotated.sinc, c (-15.5, 15.5), n=40)
@
\end {center}

In the contour plot, the contour values have been set to zero, and the high color variation option has been used.

Also note that the heatmap does not have a smooth appearance.

The simplest solution (for a smooth appearance) is to increase the n value.\\
However, there's an appendix later, which gives an example of plotting one heatmap on top of another, in the area of high curvature.\\ This should be more efficient.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Triangular Plots}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The functions \tmu {plot\_tricontour}, \tmu {plot\_trisurface}, \tmu {plotf\_tricontour} and \tmu {plotf\_trisurface} can be used to produce triangular plots.

They're similar to the \tmu {plot\_cfield}, \tmu {plot\_surface}, \tmu {plotf\_cfield} and \tmu {plotf\_surface} functions. 

In the matrix version, the matrix must be square, and only upper left part of the matrix (including the diagonal) is used.

In functional versions, the function needs to be a function of two variables, which takes values between 0 and 1, where they (along with a third implicit variable) sum to one.

If you need to plot a function that doesn't have these properties, then you need to create a wrapper function.

Here's a simple example:

<<>>=
f <- function (w1, w2, w3 = 1 - w1 - w2)
    (w1 - 1 / 3)^2 + (w2 - 1 / 3)^2 + (w3 - 1 / 3)^2
@

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plotf_tricontour (f, xlab="w1", ylab="w2")
@
\end {center}

Note that the x and y arguments are ignored.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Isosurface Plots\\(For Functions/Equations of Three Variables)}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Re-iterating, these functions require the misc3d package to be installed and loaded.

The \tmu {plot\_isosurface} and \tmu {plotf\_isosurface} functions can be used to plot 3d contour plots.

Unlike previous plotting functions, the fv argument is a three dimensional array rather than a matrix.\\
(And there's a z coordinate, separate from the function value).

The first two variables have the same interpretation as other 3d plots in this package, with the third variable giving the height. Except that x, y and z describe coordinates of the fv array, not the resulting isosurfaces.

Also, it's possible for the the x, y, z, fv and n arguments to be lists, one list element for each isosurface.

The following example plots the \tmu {bispherical.dist} function, with three isosurfaces.

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plotf_isosurface (bispherical.dist,
    c (-3, 3),, c (-2, 2), nsurfaces=3,
    ref.arrows=FALSE, pconstants = c (1, 1, 0) )
@
\end {center}

Note that my functions use misc3d::\tmu {computeContour3d} function to compute isosurfaces, which in turn, uses the ``Marching Cubes'' algorithm.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {3D-Based Contour-Heatmap Plots}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Here, 3d-based combined contour-heat plots contain a set of 2d slides (or slices).

The \tmu {plot\_cfield3} and \tmu {plotf\_cfield3} functions are similar to the \tmu {plot\_cfield} and \tmu {plotf\_cfield} functions.

Unlike previous plotting functions, the main argument, fv, is a is a list of two or more matrices.\\
One matrix for each slide.

The following example also plots the \tmu {bispherical.dist} function, but gives slides rather than isosurfaces:

\begin {center}
<<fig=TRUE, width=4.75, height=3.75>>=
plotf_cfield3 (bispherical.dist, c (-3, 3),, c (-2, 2), emph="l")
@

\end {center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {2D Vector Fields}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The \tmu {plot\_vec2} and \tmu {plotf\_vec2} functions can be used to produce plots of 2d vector fields.

They're similar to the \tmu {plot\_cfield} and \tmu {plotf\_cfield} functions.

In the matrix version, there's two input matrices, dx (for the x component) and dy (for the y component). In the functional version, the function needs to return a two-column matrix, with the first column being the x component and the second column being the y component.

Here's a simple example:

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plotf_vec2 (circular.field, c (-1.6, 1.6), c (-1.1, 1.1) )
@
\end {center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {3D Vector Fields}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The \tmu {plot\_vec3} and \tmu {plotf\_vec3} functions can be used to produce plots of 3d vector fields.

They're similar to the \tmu {plot\_vec2} and \tmu {plotf\_vec2} functions, from the previous section.

In the array version, there's three input arrays, dx, dy and dy.\\
In the functional version, the function needs to return a three-column matrix.

Here's a simple example:

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plotf_vec3 (plughole.field, c (-1.5, 1.5),, c (-0.35, 1.3),
    ref.arrows=FALSE)
@
\end {center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Plotting Colors\\(Overview)}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This package uses the base graphics system, but largely, uses a different system for color.

Plotting colors, can be changed by:

\begin {itemize}
\item Changing the theme, which is a global option.
\item Changing specific global options, for particular plotting functions.
\item Setting color-related arguments, when calling the plotting functions.
\end {itemize}

Refer to the \tmu {set.bs.options} function, for more information on global options.

This package uses a system of ``litmus'' objects, for heatmaps and surface plots.

A litmus object is a function that maps a numeric vector to a character vector of R color strings.\\
(Suitable for use with the base graphics system).

Also, there are multi-litmus objects that combine two or more litmus objects together, and litmus-fitting functions, that fit a litmus object to a vector of data.

Plotting functions that use heatmaps, have colf and colff arguments.\\
The colf argument is for a litmus object (refer to Appendix A, for an example) and the colff argument is for a litmus-fitting function (refer to Appendix B, for an example).

There are a range of predefined litmus objects and litmus-fitting functions, but it's also possible to define your own.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Predefined Litmus Objects and Litmus-Fitting Functions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This package has several predefined litmus objects:

\begin {center}
<<fig=TRUE, width=4.75, height=0.8>>=
plot (blue.litmus () )
@
<<fig=TRUE, width=4.75, height=0.8>>=
plot (green.litmus () )
@
<<fig=TRUE, width=4.75, height=0.8>>=
plot (blue.litmus.hcv () )
@
<<fig=TRUE, width=4.75, height=0.8>>=
plot (green.litmus.hcv () )
@
<<fig=TRUE, width=4.75, height=0.8>>=
plot (rainbow.litmus () )
@
<<fig=TRUE, width=4.75, height=0.8>>=
plot (heat.litmus () )
@
\end {center}

Note that in general, it's easier to create litmus objects via litmus-fitting functions:

<<>>=
u <- rnorm (30, 4, 1)^3
@

\begin {center}
<<fig=TRUE, width=4.75, height=0.8>>=
plot (blue.litmus.fit.hcv (u) )
@
@
\end {center}

Note that the fitted litmus object doesn't necessarily appear smooth, however, when used with heatmaps, it should look better.

Also note that the rainbow litmus objects are adapted from the \tmu {rainbow\_hcl} function from the colorspace package.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {User-Defined Litmus Objects and Litmus-Fitting Functions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The \tmu {litmus} and \tmu {litmus.spline} functions can be used to create litmus objects.

Also, we can create a function to fit litmus objects by wrapping the \tmu {litmus.fit} function.

All three functions take a 3-column or 4-column matrix, representing a set of length-3 or length-4 color vectors, along with a string specifying the input color space.

The \tmu {litmus} function takes lower and upper limits.\\
The \tmu {litmus.spline} function takes a vector of knots.\\
And the \tmu {litmus.fit} function takes a vector of data.

A matrix of color vectors:

<<>>=
.colvs <- cbind (c (c (100, 150, 200, 250) ), 35, 75)
rownames (.colvs) <- c ("first color", "(2nd)", "(3rd)", "last color")
colnames (.colvs) <- c ("H", "C", "L")
@

<<>>=
.colvs
@

Note that its not necessary to set row and column names.\\
(I've just done that to make the matrix easier to interpret).

A user defined function to create a litmus object:

<<>>=
my.litmus <- function (a=0, b=1)
    litmus (a, b, .colvs, color.space="HCL")
@

\begin {center}
<<fig=TRUE, width=4.75, height=0.8>>=
plot (my.litmus () )
@
\end {center}

Or a litmus-fitting function:

<<>>=
my.litmus.fit <- function (x, ...)
    litmus.fit (x, .colvs, color.space="HCL", ...)
@

\begin {center}
<<fig=TRUE, width=4.75, height=0.8>>=
plot (my.litmus.fit (u) )
@
\end {center}

\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {References}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection* {R Packages}

Spurdle, A. (2020). kubik: Cubic Hermite Splines and Related Optimization Methods

Ihaka, R., Murrell, P., Hornik, K., Fisher, J. Stauffer, R., Wilke, C., McWhite, C., \&\\Zeileis, A. (2019). colorspace: A Toolbox for Manipulating and Assessing Colors and Palettes

Feng, D., \& Tierney, L. (2013) misc3d: Miscellaneous 3D Plots

\subsection* {Notes}

The colorspace package contains further color-related references.

\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Appendix A:\\Improved Contour Plot\\(and an example of using the \tmu{colf} argument)}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<>>=
x <- y <- seq (-15.5, 15.5, length.out=60)
fv <- outer (x, y, rotated.sinc)
colf <- blue.litmus.fit.hcv (fv)
@

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
#larger heatmap
plot_cfield (x, y, fv,
    contours=FALSE, colf=colf)
#smaller heatmap
plotf_cfield (rotated.sinc, c (-4, 4),
    add=TRUE, contours=FALSE, colf=colf, n=60)
#contour lines
plot_cfield (x, y, fv,
    add=TRUE, fb=0, heatmap=FALSE)
@
\end {center}

Note that the litmus object has to be constructed outside the plotting functions, because a common litmus object is required.\\
(If the litmus object was constructed within the plotting functions by setting the colff argument, then each heatmap would be on a different color scale).

\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Appendix B:\\Hot and Cold Style Colors\\(and an example of using the \tmu{colff} argument)}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<>>=
f <- function (x, y) x + x^3 + y + y^3
@

A wrapper for the hot.and.cold.fit function:
<<>>=
tempff <- function (x)
    hot.and.cold.fit (x, t = c (-0.2, 0.2) )
@

And setting the colff argument:
\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plotf_surface (f, c (-1, 1),
    grid.color="grey65",
    gradient.shading=FALSE,
    colff=tempff)
@
\end {center}

The colors aren't limited to red and blue.

The following uses green and brown:
<<>>=
tempff2 <- function (x)
    hot.and.cold.fit (x, t = c (-0.2, 0.2),
    hot.hue=100, cold.hue=60)
@

\end{document}
